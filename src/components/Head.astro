---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/600.css";
import inter400 from "@fontsource/inter/files/inter-latin-400-normal.woff2";
import inter600 from "@fontsource/inter/files/inter-latin-600-normal.woff2";
import lora400 from "@fontsource/lora/files/lora-latin-400-normal.woff2";
import lora600 from "@fontsource/lora/files/lora-latin-600-normal.woff2";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon-dark.svg"
  media="(prefers-color-scheme: dark)"
/>
<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon-light.svg"
  media="(prefers-color-scheme: light)"
/>

<meta name="generator" content={Astro.generator} />
<meta name="theme-color" />

<link rel="preload" href={inter400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={inter600} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora600} as="font" type="font/woff2" crossorigin />

<link rel="canonical" href={canonicalURL} />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script>
  // This script runs only once on initial load for View Transitions
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]'
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>
  // Declare state variables in a scope accessible across init calls
  let blinkTimeoutId = null;
  let pigAnimationLoopId = null;
  let isWiggling = false; // State for wiggle animation

  // --- Other function definitions (animate, onScroll, etc.) ---
  function animate() {
    const animateElements = document.querySelectorAll(".animate");
    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");
    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `
      )
    );
    document.head.appendChild(css);
    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
    window.getComputedStyle(css).opacity; // Trigger reflow
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;
    const themeColorMeta = document.querySelector('meta[name="theme-color"]');
    const isDark =
      userTheme === "dark" ||
      (userTheme !== "light" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches);
    toggleTheme(isDark);
    if (themeColorMeta) {
      themeColorMeta.setAttribute("content", isDark ? "#020617" : "#ffedd5");
    }
  }

  // --- Main Initialization function ---
  function init() {
    console.log("Running init()...");

    // --- Theme, Scroll, Animation Setup ---
    preloadTheme();
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.removeEventListener("click", scrollToTop);
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    if (backToPrev && !backToPrev.hasAttribute("data-listener-added")) {
      backToPrev?.addEventListener("click", () => window.history.back());
      backToPrev.setAttribute("data-listener-added", "true");
    }

    const themeColorMeta = document.querySelector('meta[name="theme-color"]');
    const toggleThemeButton = document.getElementById("theme-button");
    if (
      toggleThemeButton &&
      !toggleThemeButton.hasAttribute("data-listener-added")
    ) {
      toggleThemeButton?.addEventListener("click", () => {
        const isDark = document.documentElement.classList.contains("dark");
        if (isDark) {
          localStorage.setItem("theme", "light");
          themeColorMeta?.setAttribute("content", "#ffedd5");
          toggleTheme(false);
        } else {
          localStorage.setItem("theme", "dark");
          themeColorMeta?.setAttribute("content", "#020617");
          toggleTheme(true);
        }
      });
      toggleThemeButton.setAttribute("data-listener-added", "true");
    }

    document.removeEventListener("scroll", onScroll);
    document.addEventListener("scroll", onScroll);

    // --- PIG ANIMATION SETUP ---
    const svg = document.querySelector(".cochon-svg");
    const head = document.getElementById("head");
    const snoutGroup = document.getElementById("snout-group");
    const leftEar = document.getElementById("left-ear");
    const rightEar = document.getElementById("right-ear");
    const leftEye = document.getElementById("left-eye");
    const rightEye = document.getElementById("right-eye");

    if (
      !svg ||
      !head ||
      !snoutGroup ||
      !leftEar ||
      !rightEar ||
      !leftEye ||
      !rightEye
    ) {
      console.error(
        "Error: One or more Pig SVG elements not found! Pig animation cannot run."
      );
      return;
    }

    // Store original positions
    const leftEyeOrigX = parseFloat(leftEye.getAttribute("cx") || "0");
    const leftEyeOrigY = parseFloat(leftEye.getAttribute("cy") || "0");
    const rightEyeOrigX = parseFloat(rightEye.getAttribute("cx") || "0");
    const rightEyeOrigY = parseFloat(rightEye.getAttribute("cy") || "0");
    const eyeOriginalRy = parseFloat(leftEye.getAttribute("ry") || "0");

    // Parallax Configuration
    const maxSnoutOffset = 0.9;
    const maxHeadOffset = 0.6;
    const maxEarOffset = 0.5;

    // Smoothing / Interpolation Setup
    const smoothingFactor = 0.1;
    let targetSnoutTx = 0,
      targetSnoutTy = 0;
    let targetHeadTx = 0,
      targetHeadTy = 0;
    let targetEarTx = 0,
      targetEarTy = 0;
    let targetLeftEyeCx = leftEyeOrigX,
      targetLeftEyeCy = leftEyeOrigY;
    let targetRightEyeCx = rightEyeOrigX,
      targetRightEyeCy = rightEyeOrigY;
    let currentSnoutTx = 0,
      currentSnoutTy = 0;
    let currentHeadTx = 0,
      currentHeadTy = 0;
    let currentEarTx = 0,
      currentEarTy = 0;
    let currentLeftEyeCx = leftEyeOrigX,
      currentLeftEyeCy = leftEyeOrigY;
    let currentRightEyeCx = rightEyeOrigX,
      currentRightEyeCy = rightEyeOrigY;

    // Wiggle Configuration
    const wiggleThreshold = 60; // pixels distance to trigger wiggle
    const wiggleAmplitude = 6; // svg units horizontal movement
    const wiggleFrequency = 0.025; // speed of wiggle (rad/ms)
    // isWiggling state is declared outside init

    // Blinking Configuration
    const blinkDuration = 100;
    const blinkRyValue = 1;
    const minBlinkInterval = 5000;
    const maxBlinkInterval = 8000;
    // blinkTimeoutId is declared outside init

    // --- Parallax & Wiggle Trigger Function (Updates TARGETS and Wiggle State) ---
    function updatePigState(event) {
      if (!svg) return;

      const mouseX = event.clientX;
      const mouseY = event.clientY;
      const svgRect = svg.getBoundingClientRect();
      const svgCenterX = svgRect.left + svgRect.width / 2;
      const svgCenterY = svgRect.top + svgRect.height / 2;
      const deltaX = mouseX - svgCenterX;
      const deltaY = mouseY - svgCenterY;

      // Check proximity for wiggle
      const distance = Math.sqrt(deltaX ** 2 + deltaY ** 2);
      isWiggling = distance < wiggleThreshold;

      // Calculate parallax targets
      const normalizedOffsetX = svgRect.width
        ? deltaX / (svgRect.width / 2)
        : 0;
      const normalizedOffsetY = svgRect.height
        ? deltaY / (svgRect.height / 2)
        : 0;
      targetSnoutTx = normalizedOffsetX * maxSnoutOffset;
      targetSnoutTy = normalizedOffsetY * maxSnoutOffset;
      targetHeadTx = normalizedOffsetX * maxHeadOffset;
      targetHeadTy = normalizedOffsetY * maxHeadOffset;
      targetEarTx = normalizedOffsetX * maxEarOffset;
      targetEarTy = normalizedOffsetY * maxEarOffset;
      targetLeftEyeCx = leftEyeOrigX + targetSnoutTx;
      targetLeftEyeCy = leftEyeOrigY + targetSnoutTy;
      targetRightEyeCx = rightEyeOrigX + targetSnoutTx;
      targetRightEyeCy = rightEyeOrigY + targetSnoutTy;
    }

    // --- Animation Loop (Interpolation + Wiggle + Applying positions) ---
    function pigAnimationLoop() {
      // Interpolate base positions
      currentSnoutTx += (targetSnoutTx - currentSnoutTx) * smoothingFactor;
      currentSnoutTy += (targetSnoutTy - currentSnoutTy) * smoothingFactor;
      currentHeadTx += (targetHeadTx - currentHeadTx) * smoothingFactor;
      currentHeadTy += (targetHeadTy - currentHeadTy) * smoothingFactor;
      currentEarTx += (targetEarTx - currentEarTx) * smoothingFactor;
      currentEarTy += (targetEarTy - currentEarTy) * smoothingFactor;
      currentLeftEyeCx +=
        (targetLeftEyeCx - currentLeftEyeCx) * smoothingFactor;
      currentLeftEyeCy +=
        (targetLeftEyeCy - currentLeftEyeCy) * smoothingFactor;
      currentRightEyeCx +=
        (targetRightEyeCx - currentRightEyeCx) * smoothingFactor;
      currentRightEyeCy +=
        (targetRightEyeCy - currentRightEyeCy) * smoothingFactor;

      // Calculate wiggle offset if close
      let wiggleOffset = 0;
      if (isWiggling) {
        // Use time to create oscillation
        wiggleOffset = Math.sin(Date.now() * wiggleFrequency) * wiggleAmplitude;
      }

      // Apply interpolated positions + wiggle offset to SVG elements
      if (head && snoutGroup && leftEar && rightEar && leftEye && rightEye) {
        // Add wiggle to horizontal translation
        head.setAttribute(
          "transform",
          `translate(${currentHeadTx + wiggleOffset} ${currentHeadTy})`
        );
        snoutGroup.setAttribute(
          "transform",
          `translate(${currentSnoutTx + wiggleOffset} ${currentSnoutTy})`
        );
        leftEar.setAttribute(
          "transform",
          `translate(${currentEarTx + wiggleOffset} ${currentEarTy})`
        );
        rightEar.setAttribute(
          "transform",
          `translate(${currentEarTx + wiggleOffset} ${currentEarTy})`
        );
        // Add wiggle to eye horizontal position
        leftEye.setAttribute(
          "cx",
          (currentLeftEyeCx + wiggleOffset).toString()
        );
        leftEye.setAttribute("cy", currentLeftEyeCy.toString());
        rightEye.setAttribute(
          "cx",
          (currentRightEyeCx + wiggleOffset).toString()
        );
        rightEye.setAttribute("cy", currentRightEyeCy.toString());
      }

      // Continue the loop
      pigAnimationLoopId = requestAnimationFrame(pigAnimationLoop);
    }

    // Blinking Functions (remain mostly the same)
    function triggerBlink() {
      if (!leftEye || !rightEye) return;
      leftEye.setAttribute("ry", blinkRyValue.toString());
      rightEye.setAttribute("ry", blinkRyValue.toString());
      setTimeout(() => {
        if (!leftEye || !rightEye) return;
        leftEye.setAttribute("ry", eyeOriginalRy.toString());
        rightEye.setAttribute("ry", eyeOriginalRy.toString());
        scheduleNextBlink();
      }, blinkDuration);
    }

    function scheduleNextBlink() {
      if (blinkTimeoutId !== null) {
        clearTimeout(blinkTimeoutId);
      }
      const randomDelay =
        Math.random() * (maxBlinkInterval - minBlinkInterval) +
        minBlinkInterval;
      blinkTimeoutId = window.setTimeout(triggerBlink, randomDelay);
    }

    // --- Setup Listeners and Start Loops ---
    document.removeEventListener("mousemove", updatePigState); // Use the new handler name
    document.addEventListener("mousemove", updatePigState); // Add listener to update targets and wiggle state

    // Remove click listener if it existed from previous versions
    svg.removeEventListener("click", window.handlePigClick); // Assuming previous handler was global or attached to window

    // Cancel any previous animation loop before starting a new one
    if (pigAnimationLoopId !== null) {
      cancelAnimationFrame(pigAnimationLoopId);
    }
    pigAnimationLoop(); // Start the animation loop

    scheduleNextBlink(); // Start/Restart blinking loop
  } // --- End of init() function ---

  // --- Initial Setup ---
  document.addEventListener("DOMContentLoaded", init);
  document.addEventListener("astro:after-swap", init);
  preloadTheme();
</script>
